<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dawnki&#39;s Blog</title>
  <subtitle>一只菜鸟程序猿的自我救赎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dawnki.github.io/"/>
  <updated>2017-06-30T15:37:21.415Z</updated>
  <id>https://dawnki.github.io/</id>
  
  <author>
    <name>Dawnki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件杯设计大赛展示视频</title>
    <link href="https://dawnki.github.io/2017/06/29/%E8%BD%AF%E4%BB%B6%E6%9D%AF%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%E5%B1%95%E7%A4%BA%E8%A7%86%E9%A2%91/"/>
    <id>https://dawnki.github.io/2017/06/29/软件杯设计大赛展示视频/</id>
    <published>2017-06-29T04:24:10.000Z</published>
    <updated>2017-06-30T15:37:21.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六届-中国软件杯-大学生软件设计大赛"><a href="#第六届-中国软件杯-大学生软件设计大赛" class="headerlink" title="第六届 中国软件杯 大学生软件设计大赛"></a>第六届 中国软件杯 大学生软件设计大赛</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>所选课题: 图片认知分类系统设计与开发</p>
</li>
<li><p>PowerBy: SCAU_Cifar团队</p>
</li>
<li><p>团队成员:</p>
</li>
<li><p>课题地址: <a href="http://www.cnsoftbei.com/bencandy.php?fid=148&amp;aid=1537" target="_blank" rel="external">http://www.cnsoftbei.com/bencandy.php?fid=148&amp;aid=1537</a></p>
</li>
</ul>
<h2 id="成果视频展示"><a href="#成果视频展示" class="headerlink" title="成果视频展示"></a>成果视频展示</h2><p>ImgTagger&amp;ImgMaster:</p>
<ul>
<li>优酷:</li>
<li>腾讯视频：</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六届-中国软件杯-大学生软件设计大赛&quot;&gt;&lt;a href=&quot;#第六届-中国软件杯-大学生软件设计大赛&quot; class=&quot;headerlink&quot; title=&quot;第六届 中国软件杯 大学生软件设计大赛&quot;&gt;&lt;/a&gt;第六届 中国软件杯 大学生软件设计大赛&lt;/h1&gt;&lt;h2 i
    
    </summary>
    
      <category term="比赛" scheme="https://dawnki.github.io/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="图片认知" scheme="https://dawnki.github.io/tags/%E5%9B%BE%E7%89%87%E8%AE%A4%E7%9F%A5/"/>
    
      <category term="机器学习" scheme="https://dawnki.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>PHP系统调用(调用Bash&amp;Python脚本)</title>
    <link href="https://dawnki.github.io/2017/06/27/PHP%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>https://dawnki.github.io/2017/06/27/PHP系统调用/</id>
    <published>2017-06-27T04:05:23.000Z</published>
    <updated>2017-06-27T06:41:03.712Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，我们在使用php进行开发时，需要调用服务器上的脚本或者调用python脚本来实现某些功能，这时候就需要使用PHP的系统调用函数。不过实际调用中会出现许许多多的问题，就拿最近有关机器学习的项目，后台是PHP实现的，不过机器学习部分用的是Python(需要用到caffe)，中间调用python就遇到了许许多多的坑。</p>
<hr>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>系统: Ubuntu 14.04</li>
<li>PHP:  5.6.22</li>
<li>Python: 2.7.6 </li>
</ul>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>  在挖矿之前先介绍一下php的系统调用函数吧:</p>
<h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><ul>
<li>描述：执行外部程序，成功则返回命令输出的最后一行， 失败则返回 FALSE，特点<strong>直接输出</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$command=<span class="string">'pwd'</span>;</div><div class="line">system($command);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/wwwroot/cifar/public</div></pre></td></tr></table></figure>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><ul>
<li>描述：执行一个外部程序,返回命令执行结果的最后一行内容。不直接输出到屏幕.<strong>如果输出只有一行则按空格为分隔符获取内容,如果多行则按行来为分隔符来获取内容存入到数组中.</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$command=<span class="string">'pwd'</span>;</div><div class="line">exec($command,$result);         <span class="comment">//命令输出内容存至result变量</span></div><div class="line">print_r($result);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Array</div><div class="line">(</div><div class="line">    [0] =&gt; /home/wwwroot/cifar/public</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><ul>
<li>描述： 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。返回命令执行的输出。 如果执行过程中发生错误或者进程不产生输出，则返回 NULL。<strong>使用本函数无法通过返回值检测进程是否成功执行。 如果需要检查进程执行的退出码，请使用 exec() 函数。</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$command=<span class="string">'who'</span>;</div><div class="line">$data=shell_exec($command);</div><div class="line">print_r($data);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root     tty1         Jun 25 14:46</div><div class="line">root     pts/0        Jun 27 12:44</div></pre></td></tr></table></figure>
<h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h3><ul>
<li>描述：执行外部程序并且显示原始输出 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。<strong>特点直接输出,原始输出</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$command=<span class="string">'who'</span>;</div><div class="line">passthru($command);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root     tty1         Jun 25 14:46</div><div class="line">root     pts/0        Jun 27 12:44</div></pre></td></tr></table></figure>
<h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><ul>
<li>要获取原始输出就用passthru</li>
<li>听说exec跟表单(grep查询的结果)更配哦</li>
<li>其他函数看着需求用就好</li>
</ul>
<hr>
<h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>  起步完之后就会开始进入实践，就会遇到各种坑，准备好了吗？</p>
<h3 id="第一坑：-disable-functions-解除PHP禁用函数"><a href="#第一坑：-disable-functions-解除PHP禁用函数" class="headerlink" title="第一坑： disable_functions 解除PHP禁用函数"></a>第一坑： disable_functions 解除PHP禁用函数</h3><p>  虽说这个默认设置不是坑，但是99%的服务器在你部署完php之后，disable_funcitons设置上都会禁用掉上面所用到函数，所以先去php.ini里面解除系统调用函数设置</p>
<ol>
<li>vi /usr/local/php/etc/php.ini (我lnmp安装默认是这个路径的，php安装在其他地方的请自行调整)</li>
<li>打开配置文件后找到disable_functions(可以用vi在命令模式下/disable_functions来查找)</li>
<li>将你之后用到的系统调用函数删去(exec,system,passthru等等),如果不在此列则表示没有默认禁用该PHP函数</li>
<li>保存(Esc退出到命令模式然后:wq!退出)，如果权限不够不能写则自行加权限解决</li>
<li>重启PHP/LNMP (lnmp restart)</li>
<li>然后就可以愉快地使用系统调用函数了</li>
</ol>
<h3 id="第二坑：-补充错误日志"><a href="#第二坑：-补充错误日志" class="headerlink" title="第二坑： 补充错误日志"></a>第二坑： 补充错误日志</h3><p>  在你调试命令的时候，<strong>最烦的不是出错，最烦的是出错了但没有错误提示</strong>，因此不能对症下药，所以，不妨在你调试命令时，顺便输出到文本文件，然后去文本文件里面找错误输出。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$command=<span class="string">'ll / 2&gt;/xxxxxx/log.txt'</span>;  <span class="comment">//将错误重定向到log.txt</span></div><div class="line">exec($command,$result);         <span class="comment">//命令输出内容存至result变量</span></div><div class="line">print_r($result);</div></pre></td></tr></table></figure>
<p>  建议命令里面涉及路径的全部都用上<strong>绝对路径</strong>，并且给日志文件给上权限(777简单粗暴)</p>
<p>  <strong>bash命令中的0代表标准输入，1代表标准输出，2代表标准错误输出</strong></p>
<h3 id="第三坑：-权限"><a href="#第三坑：-权限" class="headerlink" title="第三坑： 权限"></a>第三坑： 权限</h3><p>  在你补充完错误日志时，你会发现最多的错误就是有关于权限的，以及有关于sudoer的，因为当你浏览器发送一个请求给服务器的web应用时，web服务器(apache或者nginx)所用的用户(www)不具备root的一些权限，所以需要修改sudoer以及涉及到的文件权限(读写操作)</p>
<ol>
<li>visudo 直接编辑 (进入利用nano编辑器编辑sudoer)</li>
<li>如果发现文本中存在 defaults requiretty 的，则用#号注释掉如 #defaults requiretty</li>
<li>apache用户的话一般系统会建立apache用户，nginx用户的话一般是www用户(可用vi /usr/local/nginx/conf/nginx.conf查看，第一行就是显示nginx所用的用户)</li>
<li>在visudo末尾中 添加 www ALL=NOPASSWD:ALL 或者 apache ALL=NOPASSWD:ALL(不同web服务器所用的用户不同)</li>
<li>然后ctrl+x 按Y保存退出nano</li>
<li>然后给你需要读写的文件加上对应权限，就可以用PHP系统调用进行文件读写等等需要权限的操作</li>
</ol>
<h3 id="第四坑：-调用Python脚本时import问题"><a href="#第四坑：-调用Python脚本时import问题" class="headerlink" title="第四坑： 调用Python脚本时import问题"></a>第四坑： 调用Python脚本时import问题</h3><p>  就举我上面提到的例子，PHP调用机器学习的Python脚本，这个Python脚本中用到了刚编译好的caffe（非Python标准库），然后import caffe的时候，或许在shell运行没问题，但是在PHP调用Python的时候可能就会炸了。</p>
<p>  例如会报 <strong>ImportError: No module named caffe</strong> 的错误</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#修改前的 PHP调用时会报caffe模块缺失的错误</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> caffe</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line">sys.path.append(<span class="string">"/（caffe-master路径）/caffe/python"</span>)    <span class="comment">#根据自己实际的绝对路径修改</span></div><div class="line">sys.path.append(<span class="string">"/（caffe-master路径）/caffe/python/caffe"</span>)<span class="comment">#根据自己实际的绝对路径修改</span></div><div class="line"><span class="keyword">import</span> caffe</div></pre></td></tr></table></figure>
<p>  对于其他需要自行编译的模块，同理举一反三吧~</p>
<h3 id="第五坑：-PHP默认开始安全模式"><a href="#第五坑：-PHP默认开始安全模式" class="headerlink" title="第五坑： PHP默认开始安全模式"></a>第五坑： PHP默认开始安全模式</h3><p>   如果PHP默认开启了安全模式，只要去php.ini里面把safe_mode(如果存在)用#号注释掉即关闭</p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>  对于其他错误的话，根据错误日志慢慢解决就好，还有更多的坑需要填呢~最后说一句，既然PHP调用Python这么麻烦，为什么不直接用Python开发呢？因为PHP是世界上最好的语言啊(误) ^_^</p>
<p>  <a href="http://php.net/manual/zh/ref.exec.php" target="_blank" rel="external">PHP系统调用官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候，我们在使用php进行开发时，需要调用服务器上的脚本或者调用python脚本来实现某些功能，这时候就需要使用PHP的系统调用函数。不过实际调用中会出现许许多多的问题，就拿最近有关机器学习的项目，后台是PHP实现的，不过机器学习部分用的是Python(需要用到caffe
    
    </summary>
    
      <category term="PHP" scheme="https://dawnki.github.io/categories/PHP/"/>
    
    
      <category term="PHP函数" scheme="https://dawnki.github.io/tags/PHP%E5%87%BD%E6%95%B0/"/>
    
      <category term="系统调用" scheme="https://dawnki.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    
      <category term="PHP调用Python脚本" scheme="https://dawnki.github.io/tags/PHP%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>PHP常用的几种魔术方法</title>
    <link href="https://dawnki.github.io/2017/06/03/php%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <id>https://dawnki.github.io/2017/06/03/php的魔术方法/</id>
    <published>2017-06-03T08:05:11.000Z</published>
    <updated>2017-06-03T15:23:28.343Z</updated>
    
    <content type="html"><![CDATA[<p>补个档，重新复习下php的几种魔术方法,同时魔术方法也是必须掌握的，面试什么的也是必考的.附上php文档的相关警告:<strong>PHP 将所有以两个下划线开头的类方法保留为魔术方法。所以在定义类方法时，除了讲到的魔术方法，建议不要以两个下划线为前缀</strong>. 切记切记~~</p>
<h2 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><ul>
<li>描述:类构造方法，在实例化类时自动调用</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span>      //参数列表可选</span></div><div class="line">  &#123;        </div><div class="line">      <span class="comment">//.....</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();   <span class="comment">//实例化时自动调用</span></div></pre></td></tr></table></figure>
<h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><ul>
<li>描述:析构函数，在对象的所有引用被删除或者脚本执行结束时调用</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span>      //参数列表为空</span></div><div class="line">    &#123;      </div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line"><span class="keyword">unset</span>($instance);      <span class="comment">//此处调用析构函数  如果此行注释掉，脚本结束亦会调用</span></div></pre></td></tr></table></figure>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><ul>
<li>描述:当类被当作字符串时，此方法返回字符串。返回值为string，无参数。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"I AM A"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $instance;</div><div class="line"></div><div class="line"><span class="keyword">print</span> $instance;</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><ul>
<li>描述:当读取不可访问属性的调用，参数string值，返回值mixed</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class A&#123;</div><div class="line">    private $a = 1;</div><div class="line">    function __get($name)       //$name为要访问的属性名</div><div class="line">    &#123;</div><div class="line">        if(isset($this-&gt;$name))&#123;</div><div class="line">            return $this-&gt;$name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = new A();</div><div class="line"></div><div class="line">echo $instance-&gt;a;  //1</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><ul>
<li>描述:当给不可访问的属性赋值时调用，参数1(属性名) string 参数2(赋值) mixed ，返回值为void</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $a = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name,$value)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$name))&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;$name=$value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$name))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line">$instance-&gt;a = <span class="number">3</span>;  <span class="comment">//自动调用__set()</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> $instance-&gt;a; <span class="comment">//自动调用__get()</span></div></pre></td></tr></table></figure>
<h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><ul>
<li>描述:对当不可访问的属性调用isset()或empty()时,__isset()会被自动调用，接受一个string 参数(被访问的属性名)</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $a;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__isset</span><span class="params">($name)</span>                 //被访问的属性名</span></div><div class="line">    &#123;            </div><div class="line">        <span class="keyword">echo</span> $name.<span class="string">"__isset is invoked"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line"><span class="keyword">isset</span>($instance-&gt;a);  <span class="comment">// a__isset is invoked</span></div></pre></td></tr></table></figure>
<h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><ul>
<li>描述:对当不可访问的属性调用unset()时,__unset()会被自动调用，接受一个string 参数(被访问的属性名)</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $a;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__unset</span><span class="params">($name)</span>            //被访问的属性名</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> $name.<span class="string">"__unset is invoked"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line"><span class="keyword">unset</span>($instance-&gt;a);    <span class="comment">//a__unset is invoked</span></div></pre></td></tr></table></figure>
<h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><ul>
<li>描述:当对象调用一个不可访问的方法是，__call()会被自动调用，接受两个参数，第一个参数string(方法名)，第二个参数array(参数列表)</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">inside</span><span class="params">($a,$b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> $a.<span class="string">'_'</span>.$b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name,$args)</span>    //方法名&amp;参数列表</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'funciton_name:'</span>.$name.<span class="string">'  parameter:'</span>.implode(<span class="string">' , '</span>,$args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line">$instance-&gt;inside(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//funciton_name:inside parameter:1 , 2 , 3</span></div></pre></td></tr></table></figure>
<h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><ul>
<li>描述:当对象调用一个不可访问的静态方法是，__callStatic()会被自动调用，接受两个参数，第一个参数string(方法名)，第二个参数array(参数列表)，<strong>修饰必须是可见的以及静态的</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">inside</span><span class="params">($a,$b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> $a.<span class="string">'_'</span>.$b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name,$args)</span>     //修饰必须是可见的以及静态的</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'static_funciton_name:'</span>.$name.<span class="string">'  parameter:'</span>.implode(<span class="string">' , '</span>,$args);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A::inside(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//static_funciton_name:inside parameter:1 , 2 , 3</span></div></pre></td></tr></table></figure>
<h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><ul>
<li>描述:当使用关键字clone对象是，__clone()方法会被自动调用.</li>
<li>作用:因为clone是浅克隆，当要复制的对象内部有一个引用属性时，并不会进行复制，而是照搬引用，所以此时需要在__clone方法中对某些引用属性进行深克隆</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $obj ;   <span class="comment">//引用对象</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(B $ojb)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;obj = $ojb;  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;obj = <span class="keyword">clone</span> <span class="keyword">$this</span>-&gt;obj;    <span class="comment">//对应引用对象进行深克隆</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $content=<span class="string">"abc"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = <span class="keyword">new</span> A(<span class="keyword">new</span> B());</div><div class="line"></div><div class="line">$b = <span class="keyword">clone</span> $a;</div><div class="line"></div><div class="line">$a-&gt;obj-&gt;content = <span class="string">"efg"</span>;    <span class="comment">//即使$a内部的引用对象改变了</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> $b-&gt;obj-&gt;content;     <span class="comment">//$b内部的引用对象仍不变 为abc</span></div></pre></td></tr></table></figure>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><ul>
<li>描述:serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，<strong>并返回一个包含对象中所有应被序列化的变量名称的数组</strong>。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</li>
<li>备注:__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $var1 = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> $var2 = <span class="number">2</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> $var3 = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span>     //返回应被序列化的变量名称的数组</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'var1'</span>,<span class="string">'var2'</span>);  <span class="comment">//序列化时忽略序列化$var3</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> serialize($instance);   <span class="comment">//O:1:"A":2:&#123;s:4:"var1";i:1;s:4:"var2";i:2;&#125;</span></div></pre></td></tr></table></figure>
<p><strong>Notice:</strong>serialize()和unserialize()，是将php的值与字符串相互转化的方法(序列化与反序列化)，主要便于存储，同时也不丢失类型结构。</p>
<h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><ul>
<li>描述:unserialize(反序列化)对象时，__wakeup()会被自动调用。</li>
<li>作用:经常用在反序列化操作(字符串还原成对象时)中，例如重新建立数据库连接，或执行其它初始化操作。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $var1 = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> $var2 = <span class="number">2</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> $var3 = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'var1'</span>,<span class="string">'var2'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;var1 = <span class="number">233</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line">$a=serialize($instance);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $a;    <span class="comment">// O:1:"A":2:&#123;s:4:"var1";i:1;s:4:"var2";i:2;&#125;  可见var1的值为1</span></div><div class="line"></div><div class="line">$a=unserialize($a);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $a-&gt;var1;  <span class="comment">//输出233 而不是 1</span></div></pre></td></tr></table></figure>
<h2 id="魔术方法实现重载"><a href="#魔术方法实现重载" class="headerlink" title="魔术方法实现重载"></a>魔术方法实现重载</h2><h3 id="属性重载"><a href="#属性重载" class="headerlink" title="属性重载"></a>属性重载</h3><p>  PHP所提供的”属性重载”是指动态地”创建”类属性</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="comment">// 可重载的属性存放在data数组中</span></div><div class="line">    <span class="keyword">private</span> $data = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="comment">// 此属性不能被重载</span></div><div class="line">    <span class="keyword">public</span> $declared = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 从类外部访问此属性时才发生重载</span></div><div class="line">    <span class="keyword">private</span> $hidden = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 利用__set动态创建</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name , $value)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;data[$name] = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回重载属性数组data</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line">$instance-&gt;a = <span class="number">3</span>;   <span class="comment">//a属性被动态添加</span></div><div class="line"></div><div class="line">print_r($instance-&gt;getData());  <span class="comment">//Array ( [a] =&gt; 3 )</span></div></pre></td></tr></table></figure>
<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>  传统的”重载”是用于提供多个同名的类方法，但各方法的参数类型和个数不同。不过要实现相同的功能可以使用__call()魔术方法.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name,$args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($name == <span class="string">'func'</span>)</div><div class="line">        &#123;</div><div class="line">            $args_num = count($args);</div><div class="line">            $invoke_name=$name.$args_num;</div><div class="line">            <span class="keyword">if</span>(method_exists(<span class="keyword">$this</span>,$invoke_name))&#123;</div><div class="line">                call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>,$invoke_name),$args);  <span class="comment">//参数1:回调方法 参数2:数组形式的参数列表</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">($arg1)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"invoke func1:"</span>.$arg1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">($arg1,$arg2)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"invoke func2:"</span>.$arg1.<span class="string">','</span>.$arg2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> A();</div><div class="line"></div><div class="line">$instance-&gt;func(<span class="number">1</span>);  <span class="comment">//执行func1</span></div><div class="line"></div><div class="line">$instance-&gt;func(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//执行func2</span></div></pre></td></tr></table></figure>
<p><strong>notice:</strong>call_user_func_array方法的第一个参数是callable类型，一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="external">PHP官方文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补个档，重新复习下php的几种魔术方法,同时魔术方法也是必须掌握的，面试什么的也是必考的.附上php文档的相关警告:&lt;strong&gt;PHP 将所有以两个下划线开头的类方法保留为魔术方法。所以在定义类方法时，除了讲到的魔术方法，建议不要以两个下划线为前缀&lt;/strong&gt;. 
    
    </summary>
    
      <category term="PHP" scheme="https://dawnki.github.io/categories/PHP/"/>
    
    
      <category term="PHP魔术方法" scheme="https://dawnki.github.io/tags/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    
      <category term="重载" scheme="https://dawnki.github.io/tags/%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu完全卸载mysql</title>
    <link href="https://dawnki.github.io/2017/05/10/%E5%88%A0%E9%99%A4mysql/"/>
    <id>https://dawnki.github.io/2017/05/10/删除mysql/</id>
    <published>2017-05-10T04:45:44.000Z</published>
    <updated>2017-05-10T05:08:19.483Z</updated>
    
    <content type="html"><![CDATA[<p>我们安装了mysql之后想卸载mysql时，往往是卸载不完全，导致下次安装又有问题，下面就提供ubuntu完全卸载mysql的方法.</p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>Linux: Ubuntu 16:04</li>
<li>Mysql 5.7</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>  <strong>温馨提示:执行之前务必确认是否备份了数据库的数据,数据无价!</strong></p>
<ul>
<li>先在shell里执行以下指令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get autoremove --purge mysql-server*</div><div class="line">sudo apt-get remove mysql-server*</div><div class="line">sudo apt-get autoremove mysql-server*</div><div class="line">sudo apt-get remove mysql-common</div><div class="line">sudo rm -rf /etc/my.cnf</div></pre></td></tr></table></figure>
<ul>
<li>建一个shell脚本(文件)叫deleteMysql.sh,内容如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">list=`sudo find / -name mysql*`</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$list</span> </div><div class="line"><span class="keyword">do</span></div><div class="line">  sudo rm -rf <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
<ul>
<li>给这个脚本加上执行权限后执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod u+x deleteMysql.sh</div><div class="line">sudo ./deleteMysql.sh</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这下子mysql应该算是完全卸载了，然后就可以跑路(误)了!!!∑(ﾟДﾟノ)ノ</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们安装了mysql之后想卸载mysql时，往往是卸载不完全，导致下次安装又有问题，下面就提供ubuntu完全卸载mysql的方法.&lt;/p&gt;
&lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="服务器部署" scheme="https://dawnki.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="mysql" scheme="https://dawnki.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="https://dawnki.github.io/tags/linux/"/>
    
      <category term="ubunut" scheme="https://dawnki.github.io/tags/ubunut/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5.2消息队列实践</title>
    <link href="https://dawnki.github.io/2017/05/10/laravel-job/"/>
    <id>https://dawnki.github.io/2017/05/10/laravel-job/</id>
    <published>2017-05-10T03:21:41.000Z</published>
    <updated>2017-05-13T07:04:37.958Z</updated>
    
    <content type="html"><![CDATA[<p>在后台开发中，很多情况需要用到队列来处理业务逻辑，前几天亲自实践了一下Laravel的队列功能，在此分享一蛤。</p>
<h2 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h2><p>举几个使用到消息队列的栗子</p>
<ul>
<li>在处理商城的库存问题，简单的实现是当用户的某件商品下单了，库存就相对应减少，但是当并发量一大时，比如A,B两个顾客同时下单，如果不使用队列可能会造成库存错误，使用队列了保证不同时执行两个减库存操作(一个阻塞掉了另外一个)。</li>
<li>当一个服务器要处理一个请求端发来的多组大量数据，而且每组数据处理起来的时间会很慢时，可以采取异步队列，就相当于请求端发过来的数据先存着，放进队列里，然后再异步处理数据(即处理数据的过程不在请求的生命周期里)</li>
<li>由于比如用户登陆了某网站之后，后台就过xx分钟给用户发延迟邮件来推送广告(怎么有点流氓(°Д°))，这里也可以用到异步队列，虽然可以用设计定时任务来轮询检查的笨方法，不过感觉用轮询来实现异步不是真正的异步</li>
</ul>
<p>扯了这么多，刚回到正题了—实践</p>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>Laravel 5.2</li>
<li>系统: Windows(wamp) or Linux(lnmp)</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><hr>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>laravel提供了多种消息队列驱动: sync(同步) database beanstalkd sqs redis<br>默认是sync，不过实际上其他几种异步队列多点，本章先用<strong>database</strong>练练手，前几天刚服务器刚配好redis，迟点再补上redis的吧~</p>
<p>so,先到 /.env (默认根目录为你的项目目录) 中 填上 QUEUE_DRIVER=database ,当然你也可以到/config/queue.php的default中将sync修改，但是建议修改.env</p>
<hr>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>修改完队列驱动后，就用Laravel的migration自动生成队列需要的表，到根目录执行artisan</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">php artisan queue:table</div><div class="line">php artisan queue:failed-table    #处理出错队列用的表</div><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
<p>此时，数据库中就会出现jobs表和failed_jobs表</p>
<p><img src="http://opobbao46.bkt.clouddn.com/job1.png"></p>
<hr>
<h3 id="创建任务类并编写任务类"><a href="#创建任务类并编写任务类" class="headerlink" title="创建任务类并编写任务类"></a>创建任务类并编写任务类</h3><p>执行artisan命令快速生成任务类并在/app/jobs/ 目录下面找到刚创建的任务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan make:job yourJobName</div></pre></td></tr></table></figure>
<p>刚自动生成的任务类包含了两个初始方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Create a new job instance.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> void</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Execute the job.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> void</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造方法__construct用于你给任务类传值or对象用，至于handle方法则是队列任务的处理(即给排在队列里的任务如何执行业务逻辑)</p>
<p>这时就有个问题了，排在队列里的任务如果处理时失败了，或者因不符合某些业务逻辑需要进行统一的失败操作，那该怎么办呢？</p>
<p>此时可以在这个任务类中添加一个failed方法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">failed</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样laravel就可以识别得到，当一个任务在执行handle方法时，遇到异常了(Throw Exception)，laravel就会自动捕获异常并执行failed方法，并在failed_job表中记录信息。这个用来管控你看不见摸不着的异步队列任务比较有用，你可以根据业务逻辑在failed方法里将错误信息输出到自己的日志或者其他操作。</p>
<h4 id="任务类里自带的几个有用方法"><a href="#任务类里自带的几个有用方法" class="headerlink" title="任务类里自带的几个有用方法"></a>任务类里自带的几个有用方法</h4><p>通过artisan生成的任务类里，由于使用(use)了InteractsWithQueue这个trait，所以可以使用到里面有几个自带的方法</p>
<ul>
<li><p>attempts</p>
<p>作用:返回任务的已经执行次数(eg.可以用于在handle方法中判断任务执行超过n次时就抛出异常来执行failed方法等等)</p>
<p>食用方法:在任务类的handle方法或者failed方法中,无参</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;attempts();</div></pre></td></tr></table></figure>
<ul>
<li><p>delete</p>
<p>作用:在队列中删除该任务(jobs表里删除)</p>
<p>食用方法:同上</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;delete();</div></pre></td></tr></table></figure>
<ul>
<li><p>release</p>
<p>作用:将当前任务再次放进队列中，可传入参数，来控制同一个任务两次运行之间的等待时间</p>
<p>食用方法:同上，不过有参，参数为int类型 表示多少秒</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;release(<span class="number">10</span>);   <span class="comment">// 同一个任务两次运行之间隔10秒执行</span></div></pre></td></tr></table></figure>
<p>目前任务类里比较常用的就是这几个方法了。</p>
<hr>
<h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><h4 id="代码里要做的事"><a href="#代码里要做的事" class="headerlink" title="代码里要做的事"></a>代码里要做的事</h4><p>编写好任务类之后，你可以在你的控制器里面创建任务，并且将它调度执行(dispatch)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$job=<span class="keyword">new</span> yourJobName($value);            <span class="comment">// 按实际情况来传值</span></div><div class="line">dispatch($job);</div></pre></td></tr></table></figure>
<p>如果想设置延时</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$job=<span class="keyword">new</span> yourJobName()-&gt;delay(<span class="number">10</span>);       <span class="comment">// 延迟10秒执行</span></div><div class="line">dispatch($job);</div></pre></td></tr></table></figure>
<p>如果想指定队列(分类)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$job=<span class="keyword">new</span> yourJobName()-&gt;onQueue(<span class="string">'test'</span>);  <span class="comment">//可以查看对应job表的queue字段</span></div><div class="line">dispatch($job);</div></pre></td></tr></table></figure>
<h4 id="shell里要做的事"><a href="#shell里要做的事" class="headerlink" title="shell里要做的事"></a>shell里要做的事</h4><p>当代码里做的事做好了之后，我们一个请求过去服务器的项目程序就能启动任务了吗？不能，因为之前我们说过，除了sync其他驱动都是异步的，<strong>而php是单线程的(意味着一个开启一个php脚本相当于开启一个进程，而这个进程里面只有一个线程)</strong>，所以我们一个请求只有一个线程，因此我们需要开多一个进程来进行队列监听了，当监听脚本监听到队列有动静时，就对队列进行处理。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan queue:listen</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>开始监听</li>
<li>发送请求(可以用postman试试)到指定控制器来调度队列任务</li>
<li>观察正在执行监听任务的shell(ctrl+c 退出监听)</li>
</ol>
<p><img src="http://opobbao46.bkt.clouddn.com/job2.png"></p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>  通过实践，算是掌握了laravel的队列使用，下面就提一下我遇到的坑点以及改进吧~</p>
<hr>
<h3 id="注意事-坑-项-点"><a href="#注意事-坑-项-点" class="headerlink" title="注意事(坑)项(点)"></a>注意事(坑)项(点)</h3><ul>
<li><p>当你使用了onQueue方法来给任务分类然后调度时，监听的命令该怎么写？</p>
<p>一开始我天真的认为一句 php artisan queue:listen 就能监听所有分类的任务，结果之后发现我定义的一个分类的任务一直不执行，看了文档又找不到缘故</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$job=<span class="keyword">new</span> yourJobName()-&gt;onQueue(<span class="string">'test'</span>);    <span class="comment">//将一个任务归为test分类</span></div><div class="line">dispatch($job);</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan queue:listen         # 你会发现,是监听不了上面的的任务的</div></pre></td></tr></table></figure>
<p>翻了一下帮助命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php artisan help queue:listen</div></pre></td></tr></table></figure>
<p>可以看到</p>
<p><img src="http://opobbao46.bkt.clouddn.com/job3.png"></p>
<p>所以正确的执行姿势应该是</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php artisan queue:listen --queue test   # 以我上面的例子而言 此处队列分类是test</div><div class="line">php artisan queue:listen --QUEUE test   # help里面说到大写也可以</div></pre></td></tr></table></figure>
<p>还有其他queue的命令就自己发掘或者看文档吧~</p>
<hr>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>为了保护监听进程(失败后重启等)，我们可以尝试用一下Supervisor(linux)</li>
<li>因为现在很多缓存都用redis，所以这个队列任务如果用redis的话，就可以一举两得了~~</li>
</ul>
<p>以上两点列入到Todo list中，有空再捣鼓一蛤!!</p>
<hr>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>感谢 <a href="http://laravelacademy.org/" target="_blank" rel="external">Laravel学院</a> 的中文文档 ！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在后台开发中，很多情况需要用到队列来处理业务逻辑，前几天亲自实践了一下Laravel的队列功能，在此分享一蛤。&lt;/p&gt;
&lt;h2 id=&quot;使用情景&quot;&gt;&lt;a href=&quot;#使用情景&quot; class=&quot;headerlink&quot; title=&quot;使用情景&quot;&gt;&lt;/a&gt;使用情景&lt;/h2&gt;&lt;p
    
    </summary>
    
      <category term="PHP" scheme="https://dawnki.github.io/categories/PHP/"/>
    
    
      <category term="Laravel" scheme="https://dawnki.github.io/tags/Laravel/"/>
    
      <category term="异步消息队列" scheme="https://dawnki.github.io/tags/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 安装Package Controller</title>
    <link href="https://dawnki.github.io/2017/05/10/sublimetextPC/"/>
    <id>https://dawnki.github.io/2017/05/10/sublimetextPC/</id>
    <published>2017-05-10T00:38:46.000Z</published>
    <updated>2017-05-10T02:04:05.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，sublime是一款很好用的文本编辑器，其好用之处在于其背后强大的插件功能，但是刚安装的sublime是不能直接安装插件的，需要先安装Package Controller 才能通过Package Controller来安装插件，下面就介绍如何安装Package Controller.</p>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>安装方法分为简单安装和手动安装,自行选择即可.</p>
<h3 id="简单的安装方法"><a href="#简单的安装方法" class="headerlink" title="简单的安装方法"></a>简单的安装方法</h3><p>使用Ctrl+`快捷键或者通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：</p>
<p>Sublime Text 3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure>
<p>如果顺利的话，此时就可以在Preferences菜单下看到Package Settings和Package Control两个菜单了。</p>
<p>Sublime Text 2 的如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib2,os; pf=&apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &apos;wb&apos; ).write( urllib2.urlopen( &apos;http://sublime.wbond.net/&apos; +pf.replace( &apos; &apos;,&apos;%20&apos; )).read()); print( &apos;Please restart Sublime Text to finish installation&apos;)</div></pre></td></tr></table></figure>
<h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><p>可能由于各种原因，无法使用代码安装，那可以通过以下步骤手动安装Package Control：</p>
<ol>
<li><p>点击Preferences &gt; Browse Packages菜单</p>
</li>
<li><p>进入打开的目录的上层目录，然后再进入Installed Packages/目录</p>
</li>
<li><p>下载Package Control.sublime-package并复制到Installed Packages/目录</p>
</li>
<li><p>重启Sublime Text。</p>
</li>
</ol>
<h2 id="如何使用Package-Controller-安装插件"><a href="#如何使用Package-Controller-安装插件" class="headerlink" title="如何使用Package Controller 安装插件"></a>如何使用Package Controller 安装插件</h2><ol>
<li>快捷键ctrl+shift+P，或者直接在Preferences &gt; Package Controller 来打开</li>
<li>在输入框中输入 install package 按回车</li>
<li>在新弹出的框中输入你要安装的插件即可</li>
</ol>
<p>效果如下图:</p>
<p><img src="http://opobbao46.bkt.clouddn.com/sb1.png"></p>
<p><img src="http://opobbao46.bkt.clouddn.com/sb2.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;众所周知，sublime是一款很好用的文本编辑器，其好用之处在于其背后强大的插件功能，但是刚安装的sublime是不能直接安装插件的，需要先
    
    </summary>
    
      <category term="文本编辑器" scheme="https://dawnki.github.io/categories/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="Sublime Text" scheme="https://dawnki.github.io/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>LNMP坑点系列:&quot;mysql.serviceJob for mysql.service failed because the control process exited with error code.&quot;</title>
    <link href="https://dawnki.github.io/2017/05/09/mysql-question/"/>
    <id>https://dawnki.github.io/2017/05/09/mysql-question/</id>
    <published>2017-05-09T13:02:09.000Z</published>
    <updated>2017-05-10T03:19:00.744Z</updated>
    
    <content type="html"><![CDATA[<p>一天舍友在lnmp下，动了一下/etc/my.cnf文件之后,重启lnmp是出现了”mysql.serviceJob for mysql.service failed because the control process exited with error code.”的问题。</p>
<h2 id="寻找元凶"><a href="#寻找元凶" class="headerlink" title="寻找元凶"></a>寻找元凶</h2><p>经过几番询问后，发现原来舍友为了更改mysql密码动了一下/etc/my.cnf文件.</p>
<p>锁定/etc/my.cnf文件！！</p>
<p><img src="http://opobbao46.bkt.clouddn.com/my1.png"></p>
<p>可以看到这个文件的初始权限是拥有者有读写功能，但同组或者其他人只有读的功能，由于舍友为了修改这个文件，帮这个文件加了所有身份都加了写的功能。</p>
<p>即：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod go+w /etc/my.cnf</div></pre></td></tr></table></figure></p>
<p>接着重启就炸了</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lnmp restart</div></pre></td></tr></table></figure>
<p><img src="http://opobbao46.bkt.clouddn.com/my2.png"></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>要解决很简单，只将这个文件的权限还原即可(只保留拥有者有写功能)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod go-w /etc/my.cnf</div></pre></td></tr></table></figure>
<p><img src="http://opobbao46.bkt.clouddn.com/my3.png"></p>
<p>如图修改完之后，大功告成!lnmp能正常重启了!</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这个坑告诉我们一定要有做事要有头有尾，文件由于一时特殊需要改了权限的，之后完事后记得改回权限!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一天舍友在lnmp下，动了一下/etc/my.cnf文件之后,重启lnmp是出现了”mysql.serviceJob for mysql.service failed because the control process exited with error code.”的
    
    </summary>
    
      <category term="服务器部署" scheme="https://dawnki.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="mysql" scheme="https://dawnki.github.io/tags/mysql/"/>
    
      <category term="linux" scheme="https://dawnki.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dawnki.github.io/2017/05/09/hello-world/"/>
    <id>https://dawnki.github.io/2017/05/09/hello-world/</id>
    <published>2017-05-09T10:51:21.767Z</published>
    <updated>2017-05-09T06:01:31.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
